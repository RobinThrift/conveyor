// @generated by protoc-gen-es v2.2.3 with parameter "import_extension=js"
// @generated from file plugin/codegen.proto (package plugin, syntax proto3)
/* eslint-disable */

import type { Message } from "@bufbuild/protobuf"
import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1"

/**
 * Describes the file plugin/codegen.proto.
 */
export declare const file_plugin_codegen: GenFile

/**
 * @generated from message plugin.File
 */
export declare type File = Message<"plugin.File"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string

    /**
     * @generated from field: bytes contents = 2;
     */
    contents: Uint8Array
}

/**
 * Describes the message plugin.File.
 * Use `create(FileSchema)` to create a new message.
 */
export declare const FileSchema: GenMessage<File>

/**
 * @generated from message plugin.Settings
 */
export declare type Settings = Message<"plugin.Settings"> & {
    /**
     * @generated from field: string version = 1;
     */
    version: string

    /**
     * @generated from field: string engine = 2;
     */
    engine: string

    /**
     * @generated from field: repeated string schema = 3;
     */
    schema: string[]

    /**
     * @generated from field: repeated string queries = 4;
     */
    queries: string[]

    /**
     * @generated from field: plugin.Codegen codegen = 12;
     */
    codegen?: Codegen
}

/**
 * Describes the message plugin.Settings.
 * Use `create(SettingsSchema)` to create a new message.
 */
export declare const SettingsSchema: GenMessage<Settings>

/**
 * @generated from message plugin.Codegen
 */
export declare type Codegen = Message<"plugin.Codegen"> & {
    /**
     * @generated from field: string out = 1;
     */
    out: string

    /**
     * @generated from field: string plugin = 2;
     */
    plugin: string

    /**
     * @generated from field: bytes options = 3;
     */
    options: Uint8Array

    /**
     * @generated from field: repeated string env = 4;
     */
    env: string[]

    /**
     * @generated from field: plugin.Codegen.Process process = 5;
     */
    process?: Codegen_Process

    /**
     * @generated from field: plugin.Codegen.WASM wasm = 6;
     */
    wasm?: Codegen_WASM
}

/**
 * Describes the message plugin.Codegen.
 * Use `create(CodegenSchema)` to create a new message.
 */
export declare const CodegenSchema: GenMessage<Codegen>

/**
 * @generated from message plugin.Codegen.Process
 */
export declare type Codegen_Process = Message<"plugin.Codegen.Process"> & {
    /**
     * @generated from field: string cmd = 1;
     */
    cmd: string
}

/**
 * Describes the message plugin.Codegen.Process.
 * Use `create(Codegen_ProcessSchema)` to create a new message.
 */
export declare const Codegen_ProcessSchema: GenMessage<Codegen_Process>

/**
 * @generated from message plugin.Codegen.WASM
 */
export declare type Codegen_WASM = Message<"plugin.Codegen.WASM"> & {
    /**
     * @generated from field: string url = 1;
     */
    url: string

    /**
     * @generated from field: string sha256 = 2;
     */
    sha256: string
}

/**
 * Describes the message plugin.Codegen.WASM.
 * Use `create(Codegen_WASMSchema)` to create a new message.
 */
export declare const Codegen_WASMSchema: GenMessage<Codegen_WASM>

/**
 * @generated from message plugin.Catalog
 */
export declare type Catalog = Message<"plugin.Catalog"> & {
    /**
     * @generated from field: string comment = 1;
     */
    comment: string

    /**
     * @generated from field: string default_schema = 2;
     */
    defaultSchema: string

    /**
     * @generated from field: string name = 3;
     */
    name: string

    /**
     * @generated from field: repeated plugin.Schema schemas = 4;
     */
    schemas: Schema[]
}

/**
 * Describes the message plugin.Catalog.
 * Use `create(CatalogSchema)` to create a new message.
 */
export declare const CatalogSchema: GenMessage<Catalog>

/**
 * @generated from message plugin.Schema
 */
export declare type Schema = Message<"plugin.Schema"> & {
    /**
     * @generated from field: string comment = 1;
     */
    comment: string

    /**
     * @generated from field: string name = 2;
     */
    name: string

    /**
     * @generated from field: repeated plugin.Table tables = 3;
     */
    tables: Table[]

    /**
     * @generated from field: repeated plugin.Enum enums = 4;
     */
    enums: Enum[]

    /**
     * @generated from field: repeated plugin.CompositeType composite_types = 5;
     */
    compositeTypes: CompositeType[]
}

/**
 * Describes the message plugin.Schema.
 * Use `create(SchemaSchema)` to create a new message.
 */
export declare const SchemaSchema: GenMessage<Schema>

/**
 * @generated from message plugin.CompositeType
 */
export declare type CompositeType = Message<"plugin.CompositeType"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string

    /**
     * @generated from field: string comment = 2;
     */
    comment: string
}

/**
 * Describes the message plugin.CompositeType.
 * Use `create(CompositeTypeSchema)` to create a new message.
 */
export declare const CompositeTypeSchema: GenMessage<CompositeType>

/**
 * @generated from message plugin.Enum
 */
export declare type Enum = Message<"plugin.Enum"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string

    /**
     * @generated from field: repeated string vals = 2;
     */
    vals: string[]

    /**
     * @generated from field: string comment = 3;
     */
    comment: string
}

/**
 * Describes the message plugin.Enum.
 * Use `create(EnumSchema)` to create a new message.
 */
export declare const EnumSchema: GenMessage<Enum>

/**
 * @generated from message plugin.Table
 */
export declare type Table = Message<"plugin.Table"> & {
    /**
     * @generated from field: plugin.Identifier rel = 1;
     */
    rel?: Identifier

    /**
     * @generated from field: repeated plugin.Column columns = 2;
     */
    columns: Column[]

    /**
     * @generated from field: string comment = 3;
     */
    comment: string
}

/**
 * Describes the message plugin.Table.
 * Use `create(TableSchema)` to create a new message.
 */
export declare const TableSchema: GenMessage<Table>

/**
 * @generated from message plugin.Identifier
 */
export declare type Identifier = Message<"plugin.Identifier"> & {
    /**
     * @generated from field: string catalog = 1;
     */
    catalog: string

    /**
     * @generated from field: string schema = 2;
     */
    schema: string

    /**
     * @generated from field: string name = 3;
     */
    name: string
}

/**
 * Describes the message plugin.Identifier.
 * Use `create(IdentifierSchema)` to create a new message.
 */
export declare const IdentifierSchema: GenMessage<Identifier>

/**
 * @generated from message plugin.Column
 */
export declare type Column = Message<"plugin.Column"> & {
    /**
     * @generated from field: string name = 1;
     */
    name: string

    /**
     * @generated from field: bool not_null = 3;
     */
    notNull: boolean

    /**
     * @generated from field: bool is_array = 4;
     */
    isArray: boolean

    /**
     * @generated from field: string comment = 5;
     */
    comment: string

    /**
     * @generated from field: int32 length = 6;
     */
    length: number

    /**
     * @generated from field: bool is_named_param = 7;
     */
    isNamedParam: boolean

    /**
     * @generated from field: bool is_func_call = 8;
     */
    isFuncCall: boolean

    /**
     * XXX: Figure out what PostgreSQL calls `foo.id`
     *
     * @generated from field: string scope = 9;
     */
    scope: string

    /**
     * @generated from field: plugin.Identifier table = 10;
     */
    table?: Identifier

    /**
     * @generated from field: string table_alias = 11;
     */
    tableAlias: string

    /**
     * @generated from field: plugin.Identifier type = 12;
     */
    type?: Identifier

    /**
     * @generated from field: bool is_sqlc_slice = 13;
     */
    isSqlcSlice: boolean

    /**
     * @generated from field: plugin.Identifier embed_table = 14;
     */
    embedTable?: Identifier

    /**
     * @generated from field: string original_name = 15;
     */
    originalName: string

    /**
     * @generated from field: bool unsigned = 16;
     */
    unsigned: boolean

    /**
     * @generated from field: int32 array_dims = 17;
     */
    arrayDims: number
}

/**
 * Describes the message plugin.Column.
 * Use `create(ColumnSchema)` to create a new message.
 */
export declare const ColumnSchema: GenMessage<Column>

/**
 * @generated from message plugin.Query
 */
export declare type Query = Message<"plugin.Query"> & {
    /**
     * @generated from field: string text = 1;
     */
    text: string

    /**
     * @generated from field: string name = 2;
     */
    name: string

    /**
     * @generated from field: string cmd = 3;
     */
    cmd: string

    /**
     * @generated from field: repeated plugin.Column columns = 4;
     */
    columns: Column[]

    /**
     * @generated from field: repeated plugin.Parameter params = 5 [json_name = "parameters"];
     */
    params: Parameter[]

    /**
     * @generated from field: repeated string comments = 6;
     */
    comments: string[]

    /**
     * @generated from field: string filename = 7;
     */
    filename: string

    /**
     * @generated from field: plugin.Identifier insert_into_table = 8 [json_name = "insert_into_table"];
     */
    insertIntoTable?: Identifier
}

/**
 * Describes the message plugin.Query.
 * Use `create(QuerySchema)` to create a new message.
 */
export declare const QuerySchema: GenMessage<Query>

/**
 * @generated from message plugin.Parameter
 */
export declare type Parameter = Message<"plugin.Parameter"> & {
    /**
     * @generated from field: int32 number = 1;
     */
    number: number

    /**
     * @generated from field: plugin.Column column = 2;
     */
    column?: Column
}

/**
 * Describes the message plugin.Parameter.
 * Use `create(ParameterSchema)` to create a new message.
 */
export declare const ParameterSchema: GenMessage<Parameter>

/**
 * @generated from message plugin.GenerateRequest
 */
export declare type GenerateRequest = Message<"plugin.GenerateRequest"> & {
    /**
     * @generated from field: plugin.Settings settings = 1;
     */
    settings?: Settings

    /**
     * @generated from field: plugin.Catalog catalog = 2;
     */
    catalog?: Catalog

    /**
     * @generated from field: repeated plugin.Query queries = 3;
     */
    queries: Query[]

    /**
     * @generated from field: string sqlc_version = 4 [json_name = "sqlc_version"];
     */
    sqlcVersion: string

    /**
     * @generated from field: bytes plugin_options = 5 [json_name = "plugin_options"];
     */
    pluginOptions: Uint8Array

    /**
     * @generated from field: bytes global_options = 6 [json_name = "global_options"];
     */
    globalOptions: Uint8Array
}

/**
 * Describes the message plugin.GenerateRequest.
 * Use `create(GenerateRequestSchema)` to create a new message.
 */
export declare const GenerateRequestSchema: GenMessage<GenerateRequest>

/**
 * @generated from message plugin.GenerateResponse
 */
export declare type GenerateResponse = Message<"plugin.GenerateResponse"> & {
    /**
     * @generated from field: repeated plugin.File files = 1;
     */
    files: File[]
}

/**
 * Describes the message plugin.GenerateResponse.
 * Use `create(GenerateResponseSchema)` to create a new message.
 */
export declare const GenerateResponseSchema: GenMessage<GenerateResponse>

/**
 * @generated from service plugin.CodegenService
 */
export declare const CodegenService: GenService<{
    /**
     * @generated from rpc plugin.CodegenService.Generate
     */
    generate: {
        methodKind: "unary"
        input: typeof GenerateRequestSchema
        output: typeof GenerateResponseSchema
    }
}>
