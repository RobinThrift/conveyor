// Code generated by sqlc. DO NOT EDIT.

import type { Database } from "./db"

import { mapRowToObj } from "./utils"

const listSettingsQuery = `-- name: ListSettings :many
SELECT id, "key", value, created_at, updated_at FROM settings`

export interface ListSettingsRow {
    id: number
    key: string
    value: any
    createdAt: string
    updatedAt: string
}

export async function listSettings(
    database: Database,
    abort?: AbortSignal,
): Promise<ListSettingsRow[]> {
    let result = await database.query(listSettingsQuery, [], abort)
    return result.map((row) => mapRowToObj<ListSettingsRow>(row, { value: JSON.parse }))
}

const saveSettingQuery = `-- name: SaveSetting :exec
INSERT INTO settings(
    key,
    value
) VALUES (?, ?)
ON CONFLICT (key)
DO UPDATE SET
    value = excluded.value,
    updated_at  = strftime('%Y-%m-%d %H:%M:%SZ', CURRENT_TIMESTAMP)`

export interface SaveSettingArgs {
    key: string
    value: any
}

export async function saveSetting(database: Database, args: SaveSettingArgs, abort?: AbortSignal) {
    await database.exec(saveSettingQuery, [args.key, JSON.stringify(args.value)], abort)
}
